/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RPC_CONFIG_H_RPCGEN
#define _RPC_CONFIG_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct AuthZRequest {
	char *user_id;
};
typedef struct AuthZRequest AuthZRequest;

struct AuthZResponse {
	char *user_id;
	char *token;
	int error_code;
	char *message;
};
typedef struct AuthZResponse AuthZResponse;

struct AccessTokenRequest {
	char *user_id;
	char *authz_token;
	int auto_refresh;
	char *refresh_token;
};
typedef struct AccessTokenRequest AccessTokenRequest;

struct AccessTokenResponse {
	char *access_token;
	char *refresh_token;
	int access_token_ttl;
	int error_code;
	char *message;
};
typedef struct AccessTokenResponse AccessTokenResponse;

struct DelegatedAction {
	char *user_id;
	char *operation;
	char *resource;
	char *access_token;
};
typedef struct DelegatedAction DelegatedAction;

struct DelegatedActionResponse {
	int error_code;
	char *message;
};
typedef struct DelegatedActionResponse DelegatedActionResponse;

#define OAUTH_PROG 0x20000001
#define OAUTH_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define requestAuthZ 1
extern  AuthZResponse * requestauthz_1(AuthZRequest *, CLIENT *);
extern  AuthZResponse * requestauthz_1_svc(AuthZRequest *, struct svc_req *);
#define approveAuthZ 2
extern  AuthZResponse * approveauthz_1(AuthZResponse *, CLIENT *);
extern  AuthZResponse * approveauthz_1_svc(AuthZResponse *, struct svc_req *);
#define generateAccessToken 3
extern  AccessTokenResponse * generateaccesstoken_1(AccessTokenRequest *, CLIENT *);
extern  AccessTokenResponse * generateaccesstoken_1_svc(AccessTokenRequest *, struct svc_req *);
#define refreshAccessToken 4
extern  AccessTokenResponse * refreshaccesstoken_1(AccessTokenRequest *, CLIENT *);
extern  AccessTokenResponse * refreshaccesstoken_1_svc(AccessTokenRequest *, struct svc_req *);
#define executeDelegatedAction 5
extern  DelegatedActionResponse * executedelegatedaction_1(DelegatedAction *, CLIENT *);
extern  DelegatedActionResponse * executedelegatedaction_1_svc(DelegatedAction *, struct svc_req *);
extern int oauth_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define requestAuthZ 1
extern  AuthZResponse * requestauthz_1();
extern  AuthZResponse * requestauthz_1_svc();
#define approveAuthZ 2
extern  AuthZResponse * approveauthz_1();
extern  AuthZResponse * approveauthz_1_svc();
#define generateAccessToken 3
extern  AccessTokenResponse * generateaccesstoken_1();
extern  AccessTokenResponse * generateaccesstoken_1_svc();
#define refreshAccessToken 4
extern  AccessTokenResponse * refreshaccesstoken_1();
extern  AccessTokenResponse * refreshaccesstoken_1_svc();
#define executeDelegatedAction 5
extern  DelegatedActionResponse * executedelegatedaction_1();
extern  DelegatedActionResponse * executedelegatedaction_1_svc();
extern int oauth_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_AuthZRequest (XDR *, AuthZRequest*);
extern  bool_t xdr_AuthZResponse (XDR *, AuthZResponse*);
extern  bool_t xdr_AccessTokenRequest (XDR *, AccessTokenRequest*);
extern  bool_t xdr_AccessTokenResponse (XDR *, AccessTokenResponse*);
extern  bool_t xdr_DelegatedAction (XDR *, DelegatedAction*);
extern  bool_t xdr_DelegatedActionResponse (XDR *, DelegatedActionResponse*);

#else /* K&R C */
extern bool_t xdr_AuthZRequest ();
extern bool_t xdr_AuthZResponse ();
extern bool_t xdr_AccessTokenRequest ();
extern bool_t xdr_AccessTokenResponse ();
extern bool_t xdr_DelegatedAction ();
extern bool_t xdr_DelegatedActionResponse ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_RPC_CONFIG_H_RPCGEN */
